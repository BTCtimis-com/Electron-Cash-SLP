{
  "contractName": "SlpDollar",
  "constructorInputs": [
    {
      "name": "scriptBaseSha256",
      "type": "bytes32"
    },
    {
      "name": "issuerPk",
      "type": "pubkey"
    },
    {
      "name": "slpSendFront",
      "type": "bytes56"
    },
    {
      "name": "pkh",
      "type": "bytes20"
    },
    {
      "name": "isFrozen",
      "type": "bytes2"
    }
  ],
  "abi": [
    {
      "name": "Send",
      "covenant": true,
      "inputs": [
        {
          "name": "payAmt",
          "type": "bytes8"
        },
        {
          "name": "payPk",
          "type": "pubkey"
        },
        {
          "name": "changeAmt",
          "type": "bytes8"
        },
        {
          "name": "changeOutput",
          "type": "bytes"
        },
        {
          "name": "scriptBase",
          "type": "bytes"
        },
        {
          "name": "pk",
          "type": "pubkey"
        },
        {
          "name": "s",
          "type": "sig"
        }
      ]
    },
    {
      "name": "Freeze",
      "covenant": true,
      "inputs": [
        {
          "name": "newFreezeState",
          "type": "bytes2"
        },
        {
          "name": "slpAmt",
          "type": "bytes8"
        },
        {
          "name": "changeOutput",
          "type": "bytes"
        },
        {
          "name": "scriptBase",
          "type": "bytes"
        },
        {
          "name": "issuerSig",
          "type": "sig"
        }
      ]
    }
  ],
  "bytecode": "OP_5 OP_PICK OP_0 OP_NUMEQUAL OP_IF OP_6 OP_PICK OP_SIZE 28 OP_SUB OP_SPLIT OP_NIP 20 OP_SPLIT OP_DROP OP_5 OP_PICK 0000 OP_EQUALVERIFY OP_8 OP_PICK OP_SIZE OP_NIP OP_8 OP_NUMEQUALVERIFY OP_9 OP_PICK OP_SIZE OP_NIP 21 OP_NUMEQUALVERIFY OP_10 OP_PICK OP_SIZE OP_NIP OP_8 OP_NUMEQUALVERIFY OP_2 OP_6 OP_ROLL OP_CAT 14 OP_CAT OP_5 OP_PICK OP_CAT 21 OP_CAT OP_3 OP_ROLL OP_CAT 38 OP_CAT OP_3 OP_PICK OP_CAT 20 OP_CAT OP_2 OP_PICK OP_CAT OP_11 OP_PICK OP_CAT 2202000000000000 OP_DUP 17a914 OP_CAT OP_2 OP_PICK OP_HASH160 OP_CAT 87 OP_CAT OP_OVER 17a914 OP_CAT OP_3 OP_ROLL OP_HASH160 OP_CAT 87 OP_CAT OP_ROT 1976a914 OP_CAT OP_10 OP_ROLL OP_HASH160 OP_CAT 88ac OP_CAT OP_5 OP_ROLL OP_9 OP_ROLL OP_CAT OP_8 OP_CAT OP_9 OP_ROLL OP_CAT OP_3 OP_ROLL OP_CAT OP_ROT OP_CAT OP_SWAP OP_CAT OP_6 OP_PICK 00000000 OP_EQUAL OP_NOTIF OP_DUP OP_7 OP_PICK OP_CAT OP_HASH256 OP_2 OP_PICK OP_EQUALVERIFY OP_ELSE OP_DUP OP_HASH256 OP_2 OP_PICK OP_EQUALVERIFY OP_ENDIF OP_7 OP_ROLL OP_SHA256 OP_3 OP_ROLL OP_EQUALVERIFY OP_6 OP_PICK OP_HASH160 OP_3 OP_ROLL OP_EQUALVERIFY OP_6 OP_ROLL OP_6 OP_ROLL OP_2DUP OP_SWAP OP_SIZE OP_1SUB OP_SPLIT OP_DROP OP_7 OP_ROLL OP_SHA256 OP_ROT OP_CHECKDATASIGVERIFY OP_CODESEPARATOR OP_CHECKSIGVERIFY OP_2DROP OP_2DROP OP_1 OP_ELSE OP_5 OP_ROLL OP_1 OP_NUMEQUALVERIFY OP_5 OP_PICK OP_SIZE 34 OP_SUB OP_SPLIT OP_NIP OP_8 OP_SPLIT OP_4 OP_SPLIT OP_NIP 20 OP_SPLIT OP_DROP OP_8 OP_PICK 0001 OP_EQUAL OP_IF OP_6 OP_PICK 0000 OP_EQUALVERIFY OP_ELSE OP_6 OP_PICK 0001 OP_EQUALVERIFY OP_8 OP_PICK 0000 OP_EQUALVERIFY OP_ENDIF 2202000000000000 17a914 OP_CAT OP_2 OP_8 OP_ROLL OP_CAT 14 OP_CAT OP_7 OP_PICK OP_CAT 21 OP_CAT OP_5 OP_PICK OP_CAT 38 OP_CAT OP_6 OP_PICK OP_CAT 20 OP_CAT OP_4 OP_PICK OP_CAT OP_12 OP_PICK OP_CAT OP_HASH160 OP_CAT 87 OP_CAT OP_ROT 1976a914 OP_CAT OP_6 OP_ROLL OP_CAT 88ac OP_CAT OP_5 OP_ROLL OP_8 OP_ROLL OP_CAT OP_ROT OP_CAT OP_SWAP OP_CAT OP_6 OP_PICK 00000000 OP_EQUAL OP_NOTIF OP_DUP OP_7 OP_PICK OP_CAT OP_HASH256 OP_2 OP_PICK OP_EQUALVERIFY OP_ELSE OP_DUP OP_HASH256 OP_2 OP_PICK OP_EQUALVERIFY OP_ENDIF OP_7 OP_ROLL OP_SHA256 OP_3 OP_ROLL OP_EQUALVERIFY OP_6 OP_ROLL OP_3 OP_ROLL OP_2DUP OP_SWAP OP_SIZE OP_1SUB OP_SPLIT OP_DROP OP_6 OP_ROLL OP_SHA256 OP_ROT OP_CHECKDATASIGVERIFY OP_CODESEPARATOR OP_CHECKSIGVERIFY OP_2DROP OP_2DROP OP_1 OP_ENDIF",
  "source": "// Copyright (C) 2020 Simple Ledger, Inc.\n//\n// Permission is hereby granted, free of charge, to any person\n// obtaining a copy of this software and associated documentation files\n// (the \"Software\"), to deal in the Software without restriction,\n// including without limitation the rights to use, copy, modify, merge,\n// publish, distribute, sublicense, and/or sell copies of the Software,\n// and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n// BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\npragma cashscript 0.5.3;\n\n// ****************************************************************************************************\n// SlpDollar v0.1\n// ****************************************************************************************************\n// \n// This contract demonstrates how to implement a digital dollar using the Simple Ledger Protocol (SLP).\n// Extremely low transaction fees and fast confirmation times make SLP an effective and efficient\n// platform for building a globally accessible Central Bank Digital Currency (CBDC).\n//\n// CBDC issuers are provided the ability to freeze or unfreeze a user's coins, at will, using the \n// \"freeze\" contract method.\n//\n// Send transactions are required to have two (2) digital dollar outputs, one payment receiver, and\n// one change back to the sender. The payment receiver's p2pkh address will receive a small BCH\n// amount (i.e., \"payNotifier\") to serve as a notification about the newly received dollar.\n//\n// Contract Methods include:\n//      - Send()   : allows the digital dollar owner to spend,\n//      - Freeze() : allows CBDC issuer to freeze or unfreeze a coin\n//\n// Constructor Inputs include:\n//      - scriptBaseSha256 : the sha256 of the base script required to be enforced\n//      - slpSendFront     : the front of the required send op_return message, less amount\n//      - issuerPk         : the CBDC issuer's public key used for freeze/unfreeze\n//      - pkh              : a 20-byte state variable representing the current coin owner's public key\n//                           hash\n//      - isFrozen         : a state variable indicating the freeze status for a coin (2 bytes is used\n//                           to avoid typing issues associated with minimal push requirements)\n//\n// ****************************************************************************************************\n//\ncontract SlpDollar(bytes32 scriptBaseSha256, pubkey issuerPk, bytes56 slpSendFront, bytes20 pkh, bytes2 isFrozen) {\n\n    // ******************************************************************\n    // Send\n    // ******************************************************************\n    //\n    // Send coin in a transaction in a payment with change sent back\n    // to pkh owner.  A notification is included to the payment\n    // receiver's p2pkh wallet.\n    //\n    // Method parameters:\n    //      - payAmt       : payment digital dollar amount for txn output 1\n    //      - payPk        : payment public key for txn output 1\n    //      - changeAmt    : change digital dollar amount sent back to pkh\n    //      - changeOutput : any p2pkh output to facilitate blockchain fees\n    //      - scriptBase   : \n    //      - pk           : the pubkey of the pkh for this coin\n    //      - s            : a signature from above pubkey for this coin\n    //\n    // ******************************************************************\n    //\n    function Send(bytes8 payAmt, pubkey payPk, bytes8 changeAmt, bytes changeOutput, bytes scriptBase, pubkey pk, sig s) {\n\n        // verify coin is not frozen\n        require(isFrozen == 0x0000);\n\n        // check scriptSig variable lengths\n        require(payAmt.length == 8);\n        require(payPk.length == 33);\n        require(changeAmt.length == 8);\n\n        // create outputs\n        bytes code = 0x02 + isFrozen + 0x14 + pkh + 0x21 + bytes(issuerPk) + 0x38 + slpSendFront + 0x20 + scriptBaseSha256 + scriptBase;\n        bytes8 dust = 0x2202000000000000;\n        bytes p2shPay = new OutputP2SH(dust, hash160(code));\n        bytes p2shChange = new OutputP2SH(dust, hash160(code));\n        bytes payNotifier = new OutputP2PKH(dust, hash160(payPk)); // this dust provides a notification to the payment receiver's standard HD wallet\n\n        // check output format\n        bytes baseOuts = slpSendFront +  payAmt + 0x08 + changeAmt + p2shPay + p2shChange + payNotifier;\n        if (changeOutput != 0x00000000) {\n            require(hash256(baseOuts + changeOutput) == tx.hashOutputs);\n        } else {\n            require(hash256(baseOuts) == tx.hashOutputs);\n        }\n\n        // require script base hash\n        require(sha256(scriptBase) == scriptBaseSha256);\n        // manually place OP_CODESEPARATOR here\n\n        // check p2pkh\n        require(hash160(pk) == pkh);\n        require(checkSig(s, pk));\n    }\n\n    // ******************************************************************\n    // Freeze/Unfreeze\n    // ******************************************************************\n    //\n    // Freeze or unfreeze coin for the pkh owner, with a notification\n    // sent to the pkh owner's p2pkh wallet.\n    //\n    // Method parameters:\n    //      - newFreezeState : either 0x01 (freeze) or 0x00 (unfreeze)\n    //      - slpAmt         : slp amount\n    //      - changeOutput   : any p2pkh output to facilitate\n    //                         blockchain fees\n    //      - scriptBase     : script base to be used for receiver to\n    //                         match scriptBaseSha256\n    //      - issuerSig      : issuer's txn signature\n    //\n    // ******************************************************************\n    //\n    function Freeze(bytes2 newFreezeState, bytes8 slpAmt, bytes changeOutput, bytes scriptBase, sig issuerSig) {\n\n        // update byte code to frozen or unfrozen\n        if (newFreezeState == 0x0001) {\n            require(isFrozen == 0x0000);\n        } else {\n            require(isFrozen == 0x0001);\n            require(newFreezeState == 0x0000);\n        }\n\n        // create outputs\n        bytes slpOut = new OutputP2SH(0x2202000000000000, hash160(0x02 + isFrozen + 0x14 + pkh + 0x21 + bytes(issuerPk) + 0x38 + slpSendFront + 0x20 + scriptBaseSha256 + scriptBase));\n        bytes ownerNotifier = new OutputP2PKH(tx.value, pkh);\n\n        // check output format\n        bytes baseOuts = slpSendFront + slpAmt + slpOut + ownerNotifier;\n        if (changeOutput != 0x00000000) {\n            require(hash256(baseOuts + changeOutput) == tx.hashOutputs);\n        } else {\n            require(hash256(baseOuts) == tx.hashOutputs);\n        }\n\n        // require script base hash\n        require(sha256(scriptBase) == scriptBaseSha256);\n        // manually place OP_CODESEPARATOR here\n\n        // check issuer's sig\n        require(checkSig(issuerSig, issuerPk));\n    }\n}",
  "compiler": {
    "name": "cashc",
    "version": "0.5.3"
  },
  "updatedAt": "2020-11-05T18:29:36.517Z"
}